{"version":3,"file":"static/js/961.e196faa5.chunk.js","mappings":"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","sources":["components/CalendarToolbar/CalendarToolbar.styled.jsx","../node_modules/date-fns/esm/isFirstDayOfMonth/index.js","../node_modules/date-fns/esm/isLastDayOfMonth/index.js","components/CalendarToolbar/PeriodPaginator/PeriodPaginator.styled.jsx","components/CalendarToolbar/PeriodPaginator/PeriodPaginator.jsx","components/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.styled.jsx","components/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.jsx","components/CalendarToolbar/CalendarToolbar.jsx","pages/CalendarPage/CalendarPage.styled.jsx","pages/CalendarPage/CalendarPage.jsx","../node_modules/date-fns/esm/addDays/index.js","../node_modules/date-fns/esm/addMonths/index.js","../node_modules/date-fns/esm/endOfDay/index.js","../node_modules/date-fns/esm/subDays/index.js","../node_modules/date-fns/esm/subMonths/index.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  @media (max-width: 767px) {\n    flex-direction: column;\n    gap: 18px;\n  }\n  @media (min-width: 768px) {\n    align-items: center;\n    justify-content: space-between;\n  }\n`;\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isFirstDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the first day of a month?\n *\n * @description\n * Is the given date the first day of a month?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the first day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 1 September 2014 the first day of a month?\n * const result = isFirstDayOfMonth(new Date(2014, 8, 1))\n * //=> true\n */\n\nexport default function isFirstDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getDate() === 1;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  @media (min-width: 768px) {\n    width: ${props => {\n      if (props.index) {\n        return '270px';\n      }\n      return '245px';\n    }};\n  }\n`;\n\nexport const MonthWrapper = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n\n  min-width: 118px;\n  height: 30px;\n  padding: 3px 12px;\n\n  background-color: var(--accent-btn-background);\n  border-radius: 8px;\n  @media (min-width: 768px) {\n    min-width: 131px;\n    height: 34px;\n    padding: 8px 12px;\n  }\n`;\n\nexport const MonthName = styled.p`\n  min-width: 94px;\n  height: 18px;\n\n  font-family: var(--primary-font);\n  font-style: normal;\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1.29;\n\n  text-align: center;\n  text-transform: uppercase;\n\n  color: var(--btn-text-color);\n  @media (min-width: 768px) {\n    min-width: 107px;\n\n    font-size: 16px;\n    line-height: 1.12;\n  }\n`;\n\nexport const WrapperButton = styled.div`\n  display: flex;\n`;\n\nconst StyledLink = styled(Link)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  isolation: isolate;\n\n  width: 36px;\n  height: 30px;\n\n  background: var(--primary-background-color);\n  border: var(--border-calendar);\n  opacity: ${props => {\n    if (props.disabled) {\n      return '0.3';\n    }\n    return '1';\n  }};\n\n  @media (min-width: 768px) {\n    width: 38px;\n    height: 34px;\n\n    border: var(--border);\n  }\n`;\n\nexport const ButtonLeft = styled(StyledLink)`\n  border-radius: 8px 0px 0px 8px;\n`;\nexport const ButtonRight = styled(StyledLink)`\n  border-radius: 0px 8px 8px 0px;\n`;\nexport const Icon = styled.svg`\n  width: 16px;\n  height: 16px;\n  stroke: var(--secondary-text-color);\n  fill: transparent;\n  @media (min-width: 768px) {\n    width: 18px;\n    height: 18px;\n  }\n`;\n","import {\n  format,\n  formatISO,\n  addMonths,\n  subMonths,\n  parseISO,\n  startOfMonth,\n  subDays,\n  addDays,\n  isThisMonth,\n  isFirstDayOfMonth,\n  isLastDayOfMonth,\n} from 'date-fns';\nimport {\n  MonthName,\n  Wrapper,\n  MonthWrapper,\n  ButtonLeft,\n  ButtonRight,\n  WrapperButton,\n  Icon,\n} from './PeriodPaginator.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addChoosedDay,\n  addCurrentMonth,\n  addIndexCurrentDay,\n  clearTasks,\n} from 'redux/calendar/calendar.slice';\nimport { selectCurrentMonth } from 'redux/calendar/calendar.selectors';\nimport Icons from '../../../images/sprite.svg';\nimport PropTypes from 'prop-types';\n\nexport const PeriodPaginator = ({ currentIndex, choosedDay }) => {\n  const currentMonth = parseISO(useSelector(selectCurrentMonth));\n\n  const dispatch = useDispatch();\n\n  const handlePrevMonth = () => {\n    dispatch(clearTasks());\n    dispatch(addCurrentMonth(subMonths(currentMonth, 1).toISOString()));\n    dispatch(\n      addChoosedDay(\n        formatISO(\n          new Date(subMonths(startOfMonth(new Date(currentMonth)), 1)),\n          { representation: 'date' }\n        )\n      )\n    );\n  };\n  const handleNextMonth = () => {\n    dispatch(clearTasks());\n    dispatch(addCurrentMonth(addMonths(currentMonth, 1).toISOString()));\n    dispatch(\n      addChoosedDay(\n        formatISO(\n          new Date(addMonths(startOfMonth(new Date(currentMonth)), 1)),\n          { representation: 'date' }\n        )\n      )\n    );\n  };\n  const handlePrevDay = () => {\n    dispatch(addChoosedDay(subDays(new Date(choosedDay), 1).toISOString()));\n    dispatch(addIndexCurrentDay(currentIndex - 1));\n  };\n  const handleNextDay = () => {\n    dispatch(addChoosedDay(addDays(new Date(choosedDay), 1).toISOString()));\n    dispatch(addIndexCurrentDay(currentIndex + 1));\n  };\n  return (\n    <Wrapper index={currentIndex}>\n      <MonthWrapper>\n        {currentIndex ? (\n          <MonthName>{format(new Date(choosedDay), 'd MMMM yyyy')}</MonthName>\n        ) : (\n          <MonthName>{format(currentMonth, 'MMMM yyyy')}</MonthName>\n        )}\n      </MonthWrapper>\n\n      <WrapperButton>\n        {currentIndex ? (\n          !isFirstDayOfMonth(new Date(choosedDay)) ? (\n            <ButtonLeft\n              to={`day/${formatISO(new Date(subDays(new Date(choosedDay), 1)), {\n                representation: 'date',\n              })}`}\n              onClick={handlePrevDay}\n            >\n              <Icon width=\"20\" height=\"20\">\n                <use href={`${Icons}#calendar-right-sf`}></use>\n              </Icon>\n            </ButtonLeft>\n          ) : (\n            <ButtonLeft disabled>\n              <Icon width=\"20\" height=\"20\">\n                <use href={`${Icons}#calendar-right-sf`}></use>\n              </Icon>\n            </ButtonLeft>\n          )\n        ) : isThisMonth(new Date(currentMonth)) ? (\n          <ButtonLeft disabled>\n            <Icon width=\"20\" height=\"20\">\n              <use href={`${Icons}#calendar-right-sf`}></use>\n            </Icon>\n          </ButtonLeft>\n        ) : (\n          <ButtonLeft\n            to={`month/${formatISO(\n              new Date(subMonths(startOfMonth(new Date(currentMonth)), 1)),\n              { representation: 'date' }\n            )}`}\n            onClick={handlePrevMonth}\n          >\n            <Icon width=\"20\" height=\"20\">\n              <use href={`${Icons}#calendar-right-sf`}></use>\n            </Icon>\n          </ButtonLeft>\n        )}\n\n        {currentIndex ? (\n          isLastDayOfMonth(new Date(choosedDay)) ? (\n            <ButtonRight disabled>\n              <Icon>\n                <use href={`${Icons}#calendar-left-sf`}></use>\n              </Icon>\n            </ButtonRight>\n          ) : (\n            <ButtonRight\n              to={`day/${formatISO(new Date(addDays(new Date(choosedDay), 1)), {\n                representation: 'date',\n              })}`}\n              onClick={handleNextDay}\n            >\n              <Icon>\n                <use href={`${Icons}#calendar-left-sf`}></use>\n              </Icon>\n            </ButtonRight>\n          )\n        ) : (\n          <ButtonRight\n            to={`month/${formatISO(\n              new Date(addMonths(startOfMonth(new Date(currentMonth)), 1)),\n              { representation: 'date' }\n            )}`}\n            onClick={handleNextMonth}\n          >\n            <Icon>\n              <use href={`${Icons}#calendar-left-sf`}></use>\n            </Icon>\n          </ButtonRight>\n        )}\n      </WrapperButton>\n    </Wrapper>\n  );\n};\nPeriodPaginator.propTypes = {\n  currentIndex: PropTypes.number || null.isRequired,\n  choosedDay: PropTypes.string,\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n`;\n\nconst StyledLink = styled(NavLink)`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n\n  width: 76px;\n  height: 34px;\n\n  background: var(--button-period-type);\n\n  font-family: var(--primary-font);\n  font-style: normal;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 1.29px;\n\n  color: var(--color-button-period-type);\n  &.active {\n    background: var(--active-button-period-type);\n    color: var(--accent-text-color);\n  }\n  @media (min-width: 768px) {\n    width: 82px;\n\n    font-size: 16px;\n    line-height: 1.12;\n  }\n`;\n\nexport const StyledLinkMonth = styled(StyledLink)`\n  padding: 8px 16px;\n\n  border: none;\n  border-right: var(--border-calendar-period-type);\n  border-radius: 8px 0px 0px 8px;\n`;\n\nexport const StyledLinkDay = styled(StyledLink)`\n  padding: 8px 25px;\n  border: none;\n  border-radius: 0px 8px 8px 0px;\n  @media (min-width: 768px) {\n    padding: 8px 26px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  Wrapper,\n  StyledLinkDay,\n  StyledLinkMonth,\n} from './PeriodTypeSelect.styled';\nimport {\n  selectChoosedDay,\n  selectCurrentMonth,\n} from 'redux/calendar/calendar.selectors';\nimport { format, formatISO, isThisMonth } from 'date-fns';\nimport {\n  addChoosedDay,\n  addIndexCurrentDay,\n} from 'redux/calendar/calendar.slice';\n\nexport const PeriodTypeSelect = () => {\n  const dispath = useDispatch();\n  const currentDate = useSelector(selectCurrentMonth);\n  const choosedDay = useSelector(selectChoosedDay);\n\n  return (\n    <Wrapper>\n      {isThisMonth(new Date(currentDate)) ? (\n        <StyledLinkMonth\n          to={`month/${formatISO(new Date(currentDate), {\n            representation: 'date',\n          })}`}\n          onClick={() => {\n            dispath(addIndexCurrentDay(null));\n          }}\n        >\n          Month\n        </StyledLinkMonth>\n      ) : (\n        <StyledLinkMonth\n          to={`month/${formatISO(new Date(choosedDay), {\n            representation: 'date',\n          })}`}\n          onClick={() => {\n            dispath(addIndexCurrentDay(null));\n          }}\n        >\n          Month\n        </StyledLinkMonth>\n      )}\n\n      {isThisMonth(new Date(currentDate)) ? (\n        <StyledLinkDay\n          to={`day/${formatISO(new Date(currentDate), {\n            representation: 'date',\n          })}`}\n          onClick={() => {\n            dispath(\n              addChoosedDay(\n                formatISO(new Date(currentDate), { representation: 'date' })\n              )\n            );\n            dispath(\n              addIndexCurrentDay(Number(format(new Date(currentDate), 'd')))\n            );\n          }}\n        >\n          Day\n        </StyledLinkDay>\n      ) : (\n        <StyledLinkDay\n          to={`day/${formatISO(new Date(choosedDay), {\n            representation: 'date',\n          })}`}\n          onClick={() => {\n            dispath(\n              addChoosedDay(formatISO(new Date(choosedDay)), {\n                representation: 'date',\n              })\n            );\n            dispath(\n              addIndexCurrentDay(Number(format(new Date(choosedDay), 'd')))\n            );\n          }}\n        >\n          Day\n        </StyledLinkDay>\n      )}\n    </Wrapper>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { Wrapper } from './CalendarToolbar.styled';\nimport { PeriodPaginator } from './PeriodPaginator/PeriodPaginator';\nimport { PeriodTypeSelect } from './PeriodTypeSelect/PeriodTypeSelect';\nimport {\n  selectChoosedDay,\n  selectIndexCurrentDay,\n} from 'redux/calendar/calendar.selectors';\n\nexport const CalendarToolbar = () => {\n  const choosedDay = useSelector(selectChoosedDay);\n  const indexCurrentDay = useSelector(selectIndexCurrentDay);\n  return (\n    <Wrapper>\n      <PeriodPaginator choosedDay={choosedDay} currentIndex={indexCurrentDay} />\n      <PeriodTypeSelect />\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  @media (min-width: 768px) {\n    padding-top: 32px;\n    gap: 32px;\n  }\n  @media (min-width: 1280px) {\n    padding-top: 0;\n  }\n`;\n","import { CalendarToolbar } from 'components/CalendarToolbar/CalendarToolbar';\nimport { Container } from './CalendarPage.styled';\nimport { Outlet } from 'react-router';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCurrentMonth } from 'redux/calendar/calendar.selectors';\nimport { getTasksOfMonth } from 'redux/calendar/calendar.operations';\nimport { format } from 'date-fns';\n\nexport default function CalendarPage() {\n  const dispatch = useDispatch();\n  const currentDate = useSelector(selectCurrentMonth);\n\n  useEffect(() => {\n    dispatch(\n      getTasksOfMonth({\n        month: format(new Date(currentDate), 'M') - 1,\n        year: Number(format(new Date(currentDate), 'yyyy')),\n      })\n    );\n  }, [currentDate, dispatch]);\n\n  return (\n    <Container>\n      <CalendarToolbar />\n      <Outlet />\n    </Container>\n  );\n}\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\n\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}"],"names":["Wrapper","styled","isFirstDayOfMonth","dirtyDate","requiredArgs","arguments","toDate","getDate","isLastDayOfMonth","date","endOfDay","getTime","endOfMonth","props","index","MonthWrapper","MonthName","WrapperButton","StyledLink","Link","disabled","ButtonLeft","ButtonRight","Icon","PeriodPaginator","currentIndex","choosedDay","currentMonth","parseISO","useSelector","selectCurrentMonth","dispatch","useDispatch","format","Date","width","height","href","Icons","to","formatISO","subDays","representation","onClick","addChoosedDay","toISOString","addIndexCurrentDay","isThisMonth","subMonths","startOfMonth","clearTasks","addCurrentMonth","addDays","addMonths","NavLink","StyledLinkMonth","StyledLinkDay","PeriodTypeSelect","dispath","currentDate","selectChoosedDay","Number","CalendarToolbar","indexCurrentDay","selectIndexCurrentDay","Container","CalendarPage","useEffect","getTasksOfMonth","month","year","dirtyAmount","amount","toInteger","isNaN","NaN","setDate","dayOfMonth","endOfDesiredMonth","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","setHours"],"sourceRoot":""}